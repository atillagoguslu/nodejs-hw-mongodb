---
description: 
globs: 
alwaysApply: true
---
I'll translate the homework assignment to English:

# Homework 2
Hello!
Are you ready to move on to a new phase? This second homework assignment will allow you to get more practice working with Node.js.

For this homework, you'll create a server that works with a contacts collection through HTTP requests. You'll initialize the project, set up the server, connect to MongoDB, and create routes to work with contacts. Don't forget to deploy your application on render.com.

This time we've also prepared a step-by-step application guide. Each step of this task will give you new experience and help you understand how HTTP requests work in a Node.js environment.

## Task

You need to create an application that will work with a contacts collection where you can get data for all contacts or one contact by ID through HTTP requests.

Data file to load:
contacts.json

## Acceptance Criteria

- A repository named nodejs-hw-mongodb must be created
- The task must be completed in the hw2-mongodb branch
- When submitting the homework, provide links to the source files on Github and the published project (hw2-mongodb branch) on render.com
- The task code should run without errors

## Step-by-Step Task Implementation

### Step 1

1. Initialize the project with `npm init -y`
2. Add eslint to project dependencies and configure the file according to module 1 materials
3. Add .gitignore and .prettierrc files with appropriate content to project root
4. Install nodemon as a development dependency. Add "dev" script to package.json scripts section to run server with nodemon

### Step 2

1. Create a src folder in project root
2. Create server.js file in src folder. This file will contain express server logic
3. Create setupServer function in src/server.js that will:
   - Create server with express() call
   - Set up cors and pino logger
   - Return 404 status and appropriate message for non-existent routes:
   ```json
   {
     "message": "Not found"
   }
   ```
   - Start server on port specified via PORT environment variable or 3000 if not specified
   - Log "Server is running on port {PORT}" when server successfully starts

Don't forget to specify environment variable in .env.example file.

Create src/index.js file. Import and call setupServer function in this file.

### Step 3

Create your cluster on mongodb and define initMongoConnection function in separate file src/db/initMongoConnection.js to establish connection.

When creating a MongoDB Atlas cluster, remember to set up network access to allow connections from any IP address:

1. Login to MongoDB Atlas account and go to your project
2. Select or create your cluster
3. Go to "Network Access" section
4. Click "+ ADD IP ADDRESS" to add new entry to IP addresses list
5. Select "ALLOW ACCESS FROM ANYWHERE" or enter 0.0.0.0/0 in "Access List Entry" field
6. Add comment if needed and click "Confirm"

Log "Mongo connection successfully established!" when successfully connected to mongodb database.

Required data for database connection should be placed in following environment variables:
- MONGODB_USER
- MONGODB_PASSWORD  
- MONGODB_URL
- MONGODB_DB

Specify these environment variables in .env.example file.

Use mongoose package to work with mongodb.

Call initMongoConnection function in src/index.js. Ensure database connection is established before server runs.

### Step 4

Create Contact model in src/db folder. Model should have following fields:

- name — string, required
- phoneNumber — string, required  
- email — string
- isFavourite — boolean, default false
- contactType — string, enum('work', 'home', 'personal'), required, default 'personal'

You can use timestamps: true parameter when creating model to automatically generate createdAt and updatedAt fields.

Import basic contacts set from contacts.json to your database using any UI (browser, Mongo Compass etc). Make sure collection name in model code matches the one in UI.

### Step 5

Create GET request that returns array of all contacts by creating /contacts route. Handling this route should include:

1. Route registration in src/server.js
2. Controller definition for this route
3. Service creation in src/services folder with relevant entity name (contacts.js in this case)

Server response should be with status code 200 and contain object with properties:

```json
{
    "status": 200,
    "message": "Successfully found contacts!",
    "data": // array of contacts obtained from request processing
}
```

### Step 6

Create /contacts/:contactId route that will return contact data with given ID or 404 error if contact not found. Handling this route should include:

1. Register route in src/server.js
2. Define controller for this route
3. Create service in src/services folder with relevant entity name (contacts.js)
4. If contact found, server response should be with status code 200 and contain object with properties:

```json
{
    "status": 200,
    "message": "Successfully found contact with id {contactId}!",
    "data": // contact object
}
```

5. Check if contact with given id exists. If contact not found, return object with 404 status code:

```json
{
    "message": "Contact not found"
}
```

At this stage, you don't need to check for invalid MongoDB ID in this module. ID is assumed to be always valid.

### Step 7

Deploy your application from hw2-mongodb branch to render.com.
It's crucial to check your deployed application on render.com works before submitting to your mentor. For example, if you forgot to add environment variables (env) during deployment, deployed backend won't work. Also check that all backend routes you created work as expected according to given task.
